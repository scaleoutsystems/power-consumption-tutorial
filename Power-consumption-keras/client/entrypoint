#!./.power-consumption-keras/bin/python

import json
import os

import docker
import fire
import numpy as np
import tensorflow as tf

from fedn.utils.kerashelper import KerasHelper



def _get_data_path():
    # Figure out FEDn client number from container name
    client = docker.from_env()
    container = client.containers.get(os.environ['HOSTNAME'])
    number = container.name[-1]

    # Return data path
    return f"/var/data/clients/{number}/power.npz"


def _compile_model(img_rows=28, img_cols=28):
    # Set input shape
    #input_shape = (img_rows, img_cols, 1)

    # Define model
    opt = tf.keras.optimizers.SGD(lr=0.0001)
    model = tf.keras.models.Sequential()
    model.add(tf.keras.layers.Dense(64, input_dim=4, activation="relu"))
    model.add(tf.keras.layers.Dense(32, activation="relu"))
    model.add(tf.keras.layers.Dense(1, activation="linear"))
    #model.summary()
    model.compile(loss = "mse", optimizer = opt,metrics=['mae'])

    return model


def _load_data(data_path, is_train=True):
    # Load data
    if data_path is None:
        data = np.load(_get_data_path())
    else:
        data = np.load(data_path)

    if is_train:
        X = data['x_train']
        y = data['y_train']
    else:
        X = data['x_test']
        y = data['y_test']

    return X, y


def init_seed(out_path='seed.npz'):
    weights = _compile_model().get_weights()
    helper = KerasHelper()
    helper.save_model(weights, out_path)


def train(in_model_path, out_model_path, data_path=None, batch_size=500, epochs=1):
    # Load data
    x_train, y_train = _load_data(data_path)

    # Load model
    model = _compile_model()
    helper = KerasHelper()
    weights = helper.load_model(in_model_path)
    model.set_weights(weights)

    # Train
    model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs)

    # Save
    weights = model.get_weights()
    helper.save_model(weights, out_model_path)


def validate(in_model_path, out_json_path, data_path=None):
    # Load data
    x_train, y_train = _load_data(data_path)
    x_test, y_test = _load_data(data_path, is_train=False)

    # Load model
    model = _compile_model()
    helper = KerasHelper()
    weights = helper.load_model(in_model_path)
    model.set_weights(weights)

    # Evaluate
    #model_score = model.evaluate(x_train, y_train)
    #model_score_test = model.evaluate(x_test, y_test)
    #y_pred = model.predict(x_test)
    #y_pred = np.argmax(y_pred, axis=1)
    
    # Evaluate

    y_pred = model.predict(x_test)
    mae_loss = tf.keras.losses.mean_absolute_error(y_test, y_pred).numpy()

    #print('mae_loss: ', np.mean(mae_loss))
    test_mae_loss = np.mean(mae_loss)

    y_pred = model.predict(x_test)
    mse_loss = tf.keras.losses.mean_squared_error(y_test, y_pred).numpy()

    #print('mse_loss: ', np.mean(mse_loss))
    test_mse_loss = np.mean(mse_loss)

    # JSON schema
    report = {
        "test_mae": str(test_mae_loss),
        "test_mse": str(test_mse_loss),
    }

    # Save JSON
    with open(out_json_path, "w") as fh:
        fh.write(json.dumps(report))


if __name__ == '__main__':
    fire.Fire({
        'init_seed': init_seed,
        'train': train,
        'validate': validate,
        '_get_data_path': _get_data_path,  # for testing
    })

